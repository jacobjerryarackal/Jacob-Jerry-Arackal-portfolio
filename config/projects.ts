import { ValidCategory, ValidExpType, ValidSkills } from "./constants";

interface PagesInfoInterface {
  title: string;
  imgArr: string[];
  description?: string;
}

interface DescriptionDetailsInterface {
  paragraphs: string[];
  bullets: string[];
}

export interface ProjectInterface {
  id: string;
  type: ValidExpType;
  companyName: string;
  category: ValidCategory[];
  shortDescription: string;
  websiteLink?: string;
  githubLink?: string;
  techStack: ValidSkills[];
  startDate: Date;
  endDate: Date;
  companyLogoImg: any;
  descriptionDetails: DescriptionDetailsInterface;
  pagesInfoArr: PagesInfoInterface[];
}

export const Projects: ProjectInterface[] = [
  {
  id: "superai",
  companyName: "SuperAI Documents",
  type: "Personal",
  category: ["AI/ML", "NLP", "Full Stack"],
  shortDescription:
    "Built an AI-powered RAG application for document understanding, retrieval, and intelligent Q&A.",
  githubLink: "https://github.com/jacobjerryarackal/AI-powered-Insight-Generator-from-PDFs", 
  techStack: [
    "Python",
    "Vector Database",
    "Streamlit",
    "Gradio",
    "LangChain",
    "FAISS",
    "HuggingFace Embeddings",
    "Groq",
    "OpenAI",
    "PyPDF2"
  ],
  startDate: new Date("2024-07-01"),
  endDate: new Date("2024-09-30"),
  companyLogoImg: "/projects/superai/logo.png",
  pagesInfoArr: [
     {
      title: "Streamlit GUI",
      description:
        "Allows users to interact with Streamlit GUI",
      imgArr: ["/projects/superai/streamlit gui.png","/projects/superai/gui 2.png"],
    },
    {
      title: "Document Upload & Processing",
      description:
        "Allows users to upload PDFs, extract text, and generate embeddings for semantic search.",
      imgArr: ["/projects/superai/document upload.png"],
    },
    {
      title: "Interactive Q&A",
      description:
        "Users can ask natural language questions and receive AI-powered responses derived directly from document context.",
      imgArr: ["/projects/superai/Interactive Q&A.png","/projects/superai/Q&A 2.png","/projects/superai/Q&A 3.png"],
    },
  ],
  descriptionDetails: {
    paragraphs: [
      "SuperAI Documents is an end-to-end AI-powered assistant designed for intelligent document processing, semantic search, and contextual Q&A.",
      "Built with LangChain, FAISS, and LlamaIndex, the system leverages advanced embedding-based retrieval for efficient document understanding.",
      "Users can interact through an intuitive Streamlit/Gradio-based frontend, where they ask questions and receive context-aware answers generated by LLMs such as Groq or OpenAI.",
      "This project highlights expertise in RAG architectures, vector search, and building scalable document intelligence solutions."
    ],
    bullets: [
      "Implemented Retrieval-Augmented Generation (RAG) for accurate and grounded responses",
      "Used LangChain with FAISS and HuggingFace embeddings for semantic search",
      "Integrated Groq and OpenAI APIs for scalable LLM-powered Q&A",
      "Designed a Streamlit/Gradio UI for interactive chat with documents",
      "Maintained conversation history for multi-turn contextual queries",
      "Supported multiple file formats including PDF, DOCX, and TXT",
      "Optimized performance with vector databases for fast similarity search",
      "Demonstrated real-world application of AI in knowledge management and document automation"
    ],
  },
},
  {
  id: "movie-ticket-booking",
  companyName: "Movie Ticket Booking",
  type: "Professional",
  category: ["Web Dev", "Full Stack"],
  shortDescription: "Full-stack movie ticket booking app with OAuth, seat selection and payment integration.",
  githubLink: "https://github.com/jacobjerryarackal/BookMovie",
  techStack: ["Next.js", "React", "Node.js", "Express", "MongoDB", "Clerk", "Razorpay", "Twilio"],
  startDate: new Date("2024-07-01"),
  endDate: new Date("2024-09-01"),
  companyLogoImg: "/projects/movie/logo.png",
  pagesInfoArr: [
    { title: "Sign In", imgArr: ["/projects/movie/Sign In.png"] },
    { title: "Landing / Browse", imgArr: ["/projects/movie/Landing.png"] },
    { title: "Movie List", imgArr: ["/projects/movie/Movie List.png"] },
    { title: "Movie Details", imgArr: ["/projects/movie/Movie Detail.png"] },
    { title: "Seat Selection", imgArr: ["/projects/movie/Seat Selection.png"] },
    { title: "Seat Confirmation", imgArr: ["/projects/movie/Seat Confirmation.png"] },
    { title: "Ticket Details", imgArr: ["/projects/movie/Ticket Details.png"] },
    { title: "Ticket Confirmation", imgArr: ["/projects/movie/Ticket Confirmation.png"] },
    { title: "Razorpay Payment Gateway", imgArr: ["/projects/movie/Razorpay.png"] },
    { title: "Razorpay Payment Process", imgArr: ["/projects/movie/Razorpay payment process.png"] },
    { title: "Razorpay Payment Sucess", imgArr: ["/projects/movie/Razorpay payment sucess.png"] },
    { title: "Whatsapp Confirmation", imgArr: ["/projects/movie/Whatsapp Confirmation.jpeg"] },


  ],
  descriptionDetails: {
    paragraphs: [
      "Built an end-to-end movie ticket booking system with seat selection, OTP & email verification, and payment integration.",
      "Implemented OAuth (Google) for authentication, Clerk for user management, and Stripe for payments.",
    ],
    bullets: [
      "Implemented scalable seat booking with optimistic locking.",
      "Integrated OAuth and 2FA flows for secure sign-in using Clerk.",
      "Added Razorpay Payement for payment process.",
    ],
  },
},
{
  id: "car-booking",
  companyName: "CarApp",
  type: "Professional",
  category: ["Web Dev", "Full Stack"],
  shortDescription:
    "Built a full-featured vehicle booking & management app with Next.js frontend + GraphQL-powered backend, enabling dynamic searches, scheduling, and user & vehicle management.",
  githubLink: "https://github.com/jacobjerryarackal/CarApp",
  techStack: ["Next.js", "Typescript", "React", "GraphQL", "Node.js", "PostgreSQL", "Prisma", "Stripe", "JWT"],
  startDate: new Date("2024-01-01"),    // approximate start
  endDate: new Date("2024-06-01"),      // or latest update
  companyLogoImg: "/projects/carapp/logo.png", // you may want to add a logo
  pagesInfoArr: [
    { title: "Sign In", imgArr: ["/projects/carapp/Car login.png"] },
    { title: "Admin Sign In", imgArr: ["/projects/carapp/Admin car login.png"] },
    {
      title: "Main Car Listing Page",
      description:
        "List of available vehicles with search, filters and images rendered using Next.js for client-side dynamic filtering.",
      imgArr: ["/projects/carapp/Home.png","/projects/carapp/Car list.png","/projects/carapp/Car list 2.png"],
    },
    {
      title: "Vehicle Detail & Pricing Page",
      description:
        "Detailed view showing vehicle features, price tiers, and availability, fetched via GraphQL queries.",
      imgArr: ["/projects/carapp/Car details.png", "/projects/carapp/Car details 2.png", "/projects/carapp/Car details 3.png",],
    },
    {
      title: "Booking Workflow",
      description:
        "Users can book vehicles, choose dates & view booking summaries; managed with State and GraphQL mutations.",
      imgArr: ["/projects/carapp/Car Booking.png","/projects/carapp/Car Booking 2.png","/projects/carapp/Car Booking 3.png",],
    },
    { title: "Stripe Payment", imgArr: ["/projects/carapp/Stripe Payment.png","/projects/carapp/Stripe payment 2.png"] },
    {
      title: "Admin Dashboard",
      description:
        "Admin panel for handling vehicles, manufacturers, models, pricing and user management. CRUD operations via GraphQL.",
      imgArr: ["/projects/carapp/Admin vehicle dashboard.png",],
    }
  ],
  descriptionDetails: {
    paragraphs: [
      `CarApp is built as a full-stack vehicle booking & management platform with focus on both user experience and admin operations. I employed Next.js + React for the frontend and a GraphQL server (Node + Prisma + PostgreSQL) for the backend to provide strongly typed, efficient API interactions.`,
      `All data fetching (vehicles, features, pricing, bookings) is done via GraphQL queries and mutations. I structured the schema so vehicle types, feature associations, and pricing tiers are dynamically configurable, giving users and admins flexibility.`,
      `JWT authentication has been implemented for secure user & admin login sessions, ensuring role-based access control across the application.`,
      `I ensured data consistency with Prisma migrations and leveraged PostgreSQL for relational data integrity (e.g. many‐to‐many between vehicles and features).`,
      `On the frontend, responsive UI handles image loading/fallbacks, filter/search states, and optimized rendering. Also handled error/fallback states for missing images etc., improving UX robustness.`
    ],
    bullets: [
      "Built a GraphQL API for all core data models: Vehicle, Feature, VehicleType, Manufacturer, Booking, Pricing.",
      "Implemented JWT authentication for secure user and admin access.",
      "Implemented many-to-many relations (vehicles ↔ features, vehicles ↔ vehicle types) with Prisma.",
      "Used Next.js for SSR/SSG where appropriate, with dynamic pages for vehicle detail views.",
      "Set up image fallback mechanisms, client-side state for filters & search, and ensured responsive UI UX.",
      "Designed admin panel with CRUD capabilities for content management via GraphQL mutations."
    ]
  }
},
  {
  id: "procoder",
  companyName: "PROCODER - Multi-Programming Code Assistant",
  type: "Personal",
  category: ["AI/ML", "Full Stack", "Developer Tools"],
  shortDescription:
    "Built an AI-powered end-to-end code assistant app using CodeLlama, LLaMA2, and Gradio with support for multi-language programming and interactive user interface.",
  githubLink:
    "https://github.com/jacobjerryarackal/PROCODER-End-To-End-Multi-Programming-Code-Assistant-App-Using-CodeLlama-LLAMA2-Large-Language-Model",
  techStack: [
    "Python",
    "Gradio",
    "Ollama",
    "CodeLlama",
    "LLaMA2",
    "REST API",
    "Requests",
    "JSON"
  ],
  startDate: new Date("2024-04-01"),
  endDate: new Date("2024-06-30"),
  companyLogoImg: "/projects/procoder/logo.png",
  pagesInfoArr: [
    {
      title: "Gradio UI",
      description:
        "Interactive Gradio-based user interface for entering prompts and viewing AI-generated code outputs.",
      imgArr: ["/projects/procoder/Gradio.png"],
    },
    {
      title: "Prompt History",
      description:
        "Maintains conversation history to provide context-aware responses from the model.",
      imgArr: ["/projects/procoder/prompt history.png"],
    },
    {
      title: "Code Generation",
      description:
        "Generates optimized, multi-language code snippets tailored to user queries.",
      imgArr: ["/projects/procoder/code generation.png","/projects/procoder/code generation 2.png"],
    },
  ],
  descriptionDetails: {
    paragraphs: [
      "PROCODER is an end-to-end AI-powered coding assistant application designed to help developers generate, debug, and optimize code in multiple programming languages.",
      "Built using CodeLlama and LLaMA2 models, the application connects with the Ollama API to deliver context-aware code completions and solutions.",
      "The frontend is developed with Gradio, providing an easy-to-use interface for users to input prompts, view generated results, and maintain a continuous conversation history.",
      "This project demonstrates expertise in AI model integration, REST API communication, and interactive tool development for developer productivity."
    ],
    bullets: [
      "Integrated CodeLlama and LLaMA2 models with Ollama API for AI-driven code generation",
      "Developed interactive Gradio-based interface with support for multi-turn conversations",
      "Implemented conversation history tracking for better context-aware responses",
      "Designed error-handling mechanisms to manage failed API responses",
      "Focused on supporting multiple programming languages for diverse developer needs",
      "Optimized request handling and response parsing using Python Requests and JSON",
      "Delivered a scalable AI-powered coding assistant tool for personal and professional use"
    ],
  },
},
{
  id: "spacex",
  companyName: "SpaceX Clone",
  type: "Personal",
  category: ["Web Dev", "Full Stack"],
  shortDescription:
    "Developed a SpaceX-inspired full-stack web application featuring rocket launches, missions, and booking functionality with a responsive Next.js + React frontend and Node.js + Express + MongoDB backend.",
  githubLink: "https://github.com/jacobjerryarackal/SpaceX-clone",
  techStack: ["Next.js", "React", "CSS 3", "Node.js", "Express", "MongoDB"],
  startDate: new Date("2023-10-01"),   
  endDate: new Date("2023-12-15"),     
  companyLogoImg: "/projects/spacex/logo.png", 
  pagesInfoArr: [
    { title: "Registeration Page", imgArr: ["/projects/spacex/Register.png"] },
    {
      title: "Missions & Rockets",
      description:
        "Dynamic listing of rockets and missions, styled with CSS and powered by Next.js client-side rendering.",
      imgArr: [
        "/projects/spacex/Home.png",
         "/projects/spacex/Home 3.png",
         "/projects/spacex/Home 4.png",
         "/projects/spacex/Home 5.png",
         "/projects/spacex/Home 6.png",
      ],
    },
    {
      title: "Starship",
      description:
        "Detailed view for each launch or mission with images, mission data, and descriptions fetched from backend API.",
      imgArr: [
        "/projects/spacex/S1.png",
        "/projects/spacex/S2.png",
        "/projects/spacex/S3.png",
        "/projects/spacex/S4.png",
        "/projects/spacex/S5.png",
        "/projects/spacex/S6.png",
        "/projects/spacex/S7.png",
      ],
    },
    {
      title: "Falcon 9",
      imgArr: [
        "/projects/spacex/F6.png",
        "/projects/spacex/F2.png",
        "/projects/spacex/F3.png",
        "/projects/spacex/F4.png",
        "/projects/spacex/F5.png",
        "/projects/spacex/F1.png",
      ],
    },
    {
      title: "Falcon Heavy",
      imgArr: [
        "/projects/spacex/FH1.png",
        "/projects/spacex/FH2.png",
        "/projects/spacex/FH3.png",
        "/projects/spacex/FH4.png",
        "/projects/spacex/FH5.png",
        "/projects/spacex/FH6.png",
      ],
    },
    {
      title: "Dragon",
      imgArr: [
        "/projects/spacex/D1.png",
        "/projects/spacex/D2.png",
        "/projects/spacex/D3.png",
        "/projects/spacex/D4.png",
        "/projects/spacex/D5.png",
        "/projects/spacex/D6.png",
        "/projects/spacex/D7.png",
      ],
    },
  ],
  descriptionDetails: {
    paragraphs: [
      "SpaceX Clone is a full-stack web application that simulates the functionality of a space launch booking system, inspired by SpaceX. The project includes a responsive frontend built using Next.js, React.js, and CSS, ensuring smooth navigation and a visually engaging UI.",
      "On the backend, a REST API was developed using Node.js and Express.js, with MongoDB as the database to store missions, rockets, users, and booking information. This provided a scalable and flexible data layer.",
      "The project demonstrates my skills in integrating frontend and backend, handling CRUD operations, and designing a realistic booking workflow.",
      "I also focused on UI responsiveness, API error handling, and MongoDB schema design to ensure clean and maintainable code."
    ],
    bullets: [
      "Implemented frontend with Next.js and React for dynamic rendering of missions and rockets.",
      "Built a Node.js + Express.js REST API for launches, missions, bookings, and user data.",
      "Integrated MongoDB for persistent storage of mission details and booking records.",
      "Created a booking workflow allowing users to reserve seats for upcoming missions.",
      "Developed an admin dashboard for CRUD operations on missions, rockets, and bookings.",
      "Designed a responsive CSS layout inspired by SpaceX’s official website."
    ]
  }
},
];

export const featuredProjects = Projects.slice(0, 3);
